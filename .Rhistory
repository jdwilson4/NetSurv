delta.hat[i] <- sd(theta.hat[indx.i])
}
delta.hat.global <- sd(theta.hat)
for(i in 1:number.comms){
indx.i <- which(community.labels == i)
for(j in 1:number.comms){
indx.j <- which(community.labels == j)
P.hat[i,j] <- sum(Network[indx.i, indx.j]) / (n.comm[i]*n.comm[j])
}
}
P.hat.array <- P.hat
delta.hat.array <- delta.hat
}
return(list(P.hat.array = P.hat.array, delta.hat.array = delta.hat.array,
delta.hat.global = delta.hat.global))
}
MLEs.example <- MLE.DCSBM(Adjacency, community.array = community.array,
T = 50, k = 2)
MLEs.example
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
delta_hat = MLEs.example$delta.hat.global)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
NetSurv <- function(Statistics, phase1.length, save.plot = c(FALSE, TRUE),
directory = getwd(), height = 7, width = 7,
xlab = "Time", ylab = "Value", xaxis.old = c(1:dim(Statistics)[1]),
xaxis.new = c(1:dim(Statistics)[1]), par.plot = c(2, round(Statistics / 2))){
#number of time steps
T <- dim(Statistics)[1]
#number of statistics analyzed
p <- dim(Statistics)[2]
names.stats <- names(Statistics)
x <- 1:T
save.plot <- save.plot[1]
if(phase1.length > T){stop("Phase I must be shorter than the entire time series")}
control.df <- Statistics
#build Shewhart control chart for each statistic
#note that we can use any control chart here. More to come on this later
if(save.plot == TRUE){
for(j in 1:p){
control.df[, j] <- 0
phase.I.stat <- Statistics[1:phase1.length, j]
sd.est <- mean(abs(diff(phase.I.stat)))/1.128
avg.est <- mean(phase.I.stat)
upper <- avg.est + 3*sd.est
lower <- avg.est - 3*sd.est
result <- c(lower, avg.est, upper)
indx <- which(Statistics[, j] > upper | Statistics[, j] < lower)
control.df[indx, j] <- 1
#Plot control chart if desired
statistic <- Statistics[, j]
file <- paste(directory, "/", names.stats[j], ".pdf", sep = "")
ylim.lower <- min(lower, min(statistic)) - 0.015
ylim.upper <- max(upper, max(statistic)) + 0.015
pdf(file = file, height = height, width = width)
print(plot(y = statistic, x = x, xlab = xlab, ylab = "Value", main = names.stats[j], type = "l", col = "black", ylim = c(ylim.lower, ylim.upper), lwd = 2,
pch = 15, cex = 1.25, cex.lab = 1.25, cex.axis = 1.22, xaxt = "n"))
points(y = statistic[indx], x = indx, col = "red", pch = 12, cex = 1.1)
abline(h = upper, lty = 2, lwd = 2, col = "blue")
abline(h = lower, lty = 2, lwd = 2,col = "blue")
axis(1, at = xaxis.old, labels = xaxis.new)
dev.off()
}
}
#Draw the control chart here
par(mfrow = par.plot)
for(j in 1:p){
control.df[, j] <- 0
phase.I.stat <- Statistics[1:phase1.length, j]
sd.est <- mean(abs(diff(phase.I.stat)))/1.128
avg.est <- mean(phase.I.stat)
upper <- avg.est + 3*sd.est
lower <- avg.est - 3*sd.est
result <- c(lower, avg.est, upper)
indx <- which(Statistics[, j] > upper | Statistics[, j] < lower)
control.df[indx, j] <- 1
#Plot control chart if desired
statistic <- Statistics[, j]
file <- paste(directory, "/", names.stats[j], ".pdf", sep = "")
ylim.lower <- min(lower, min(statistic)) - 0.015
ylim.upper <- max(upper, max(statistic)) + 0.015
plot(y = statistic, x = x, xlab = xlab, ylab = "Value", main = names.stats[j], type = "l", col = "black", ylim = c(ylim.lower, ylim.upper), lwd = 2,
pch = 15, cex = 1.25, cex.lab = 1.25, cex.axis = 1.22, xaxt = "n")
points(y = statistic[indx], x = indx, col = "red", pch = 12, cex = 1.1)
abline(h = upper, lty = 2, lwd = 2, col = "blue")
abline(h = lower, lty = 2, lwd = 2,col = "blue")
axis(1, at = xaxis.old, labels = xaxis.new)
}
return(Control.Chart = control.df)
}
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
par(mfrow = c(2, round(Statistics / 2)))
NetSurv <- function(Statistics, phase1.length, save.plot = c(FALSE, TRUE),
directory = getwd(), height = 7, width = 7,
xlab = "Time", ylab = "Value", xaxis.old = c(1:dim(Statistics)[1]),
xaxis.new = c(1:dim(Statistics)[1])){
#number of time steps
T <- dim(Statistics)[1]
#number of statistics analyzed
p <- dim(Statistics)[2]
names.stats <- names(Statistics)
x <- 1:T
save.plot <- save.plot[1]
if(phase1.length > T){stop("Phase I must be shorter than the entire time series")}
control.df <- Statistics
#build Shewhart control chart for each statistic
#note that we can use any control chart here. More to come on this later
if(save.plot == TRUE){
for(j in 1:p){
control.df[, j] <- 0
phase.I.stat <- Statistics[1:phase1.length, j]
sd.est <- mean(abs(diff(phase.I.stat)))/1.128
avg.est <- mean(phase.I.stat)
upper <- avg.est + 3*sd.est
lower <- avg.est - 3*sd.est
result <- c(lower, avg.est, upper)
indx <- which(Statistics[, j] > upper | Statistics[, j] < lower)
control.df[indx, j] <- 1
#Plot control chart if desired
statistic <- Statistics[, j]
file <- paste(directory, "/", names.stats[j], ".pdf", sep = "")
ylim.lower <- min(lower, min(statistic)) - 0.015
ylim.upper <- max(upper, max(statistic)) + 0.015
pdf(file = file, height = height, width = width)
print(plot(y = statistic, x = x, xlab = xlab, ylab = "Value", main = names.stats[j], type = "l", col = "black", ylim = c(ylim.lower, ylim.upper), lwd = 2,
pch = 15, cex = 1.25, cex.lab = 1.25, cex.axis = 1.22, xaxt = "n"))
points(y = statistic[indx], x = indx, col = "red", pch = 12, cex = 1.1)
abline(h = upper, lty = 2, lwd = 2, col = "blue")
abline(h = lower, lty = 2, lwd = 2,col = "blue")
axis(1, at = xaxis.old, labels = xaxis.new)
dev.off()
}
}
#Draw the control chart here
par(mfrow = c(2, round(Statistics / 2)))
for(j in 1:p){
control.df[, j] <- 0
phase.I.stat <- Statistics[1:phase1.length, j]
sd.est <- mean(abs(diff(phase.I.stat)))/1.128
avg.est <- mean(phase.I.stat)
upper <- avg.est + 3*sd.est
lower <- avg.est - 3*sd.est
result <- c(lower, avg.est, upper)
indx <- which(Statistics[, j] > upper | Statistics[, j] < lower)
control.df[indx, j] <- 1
#Plot control chart if desired
statistic <- Statistics[, j]
file <- paste(directory, "/", names.stats[j], ".pdf", sep = "")
ylim.lower <- min(lower, min(statistic)) - 0.015
ylim.upper <- max(upper, max(statistic)) + 0.015
plot(y = statistic, x = x, xlab = xlab, ylab = "Value", main = names.stats[j], type = "l", col = "black", ylim = c(ylim.lower, ylim.upper), lwd = 2,
pch = 15, cex = 1.25, cex.lab = 1.25, cex.axis = 1.22, xaxt = "n")
points(y = statistic[indx], x = indx, col = "red", pch = 12, cex = 1.1)
abline(h = upper, lty = 2, lwd = 2, col = "blue")
abline(h = lower, lty = 2, lwd = 2,col = "blue")
axis(1, at = xaxis.old, labels = xaxis.new)
}
return(Control.Chart = control.df)
}
round(3/2)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
names(statistics.df)
par(mfrow = c(1,1))
par(mfrow = c(2,1))
paste(x = 2)
NetSurv <- function(Statistics, phase1.length, save.plot = c(FALSE, TRUE),
directory = getwd(), height = 7, width = 7,
xlab = "Time", ylab = "Value", xaxis.old = c(1:dim(Statistics)[1]),
xaxis.new = c(1:dim(Statistics)[1])){
#number of time steps
T <- dim(Statistics)[1]
#number of statistics analyzed
p <- dim(Statistics)[2]
names.stats <- names(Statistics)
x <- 1:T
save.plot <- save.plot[1]
if(phase1.length > T){stop("Phase I must be shorter than the entire time series")}
control.df <- Statistics
#build Shewhart control chart for each statistic
#note that we can use any control chart here. More to come on this later
if(save.plot == TRUE){
for(j in 1:p){
control.df[, j] <- 0
phase.I.stat <- Statistics[1:phase1.length, j]
sd.est <- mean(abs(diff(phase.I.stat)))/1.128
avg.est <- mean(phase.I.stat)
upper <- avg.est + 3*sd.est
lower <- avg.est - 3*sd.est
result <- c(lower, avg.est, upper)
indx <- which(Statistics[, j] > upper | Statistics[, j] < lower)
control.df[indx, j] <- 1
#Plot control chart if desired
statistic <- Statistics[, j]
file <- paste(directory, "/", names.stats[j], ".pdf", sep = "")
ylim.lower <- min(lower, min(statistic)) - 0.015
ylim.upper <- max(upper, max(statistic)) + 0.015
pdf(file = file, height = height, width = width)
print(plot(y = statistic, x = x, xlab = xlab, ylab = "Value", main = paste(names.stats[j]), type = "l", col = "black", ylim = c(ylim.lower, ylim.upper), lwd = 2,
pch = 15, cex = 1.25, cex.lab = 1.25, cex.axis = 1.22, xaxt = "n"))
points(y = statistic[indx], x = indx, col = "red", pch = 12, cex = 1.1)
abline(h = upper, lty = 2, lwd = 2, col = "blue")
abline(h = lower, lty = 2, lwd = 2,col = "blue")
axis(1, at = xaxis.old, labels = xaxis.new)
dev.off()
}
}
#Draw the control chart here
par(mfrow = c(2, round(Statistics / 2)))
for(j in 1:p){
control.df[, j] <- 0
phase.I.stat <- Statistics[1:phase1.length, j]
sd.est <- mean(abs(diff(phase.I.stat)))/1.128
avg.est <- mean(phase.I.stat)
upper <- avg.est + 3*sd.est
lower <- avg.est - 3*sd.est
result <- c(lower, avg.est, upper)
indx <- which(Statistics[, j] > upper | Statistics[, j] < lower)
control.df[indx, j] <- 1
#Plot control chart if desired
statistic <- Statistics[, j]
file <- paste(directory, "/", names.stats[j], ".pdf", sep = "")
ylim.lower <- min(lower, min(statistic)) - 0.015
ylim.upper <- max(upper, max(statistic)) + 0.015
plot(y = statistic, x = x, xlab = xlab, ylab = "Value", main = names.stats[j], type = "l", col = "black", ylim = c(ylim.lower, ylim.upper), lwd = 2,
pch = 15, cex = 1.25, cex.lab = 1.25, cex.axis = 1.22, xaxt = "n")
points(y = statistic[indx], x = indx, col = "red", pch = 12, cex = 1.1)
abline(h = upper, lty = 2, lwd = 2, col = "blue")
abline(h = lower, lty = 2, lwd = 2,col = "blue")
axis(1, at = xaxis.old, labels = xaxis.new)
}
return(Control.Chart = control.df)
}
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
rm(list = ls())
library(NetSurv, quietly = TRUE)
#load other required packages
library(Matrix, quietly = TRUE)
library(Rlab, quietly = TRUE)
net <- DCSBM(n = 500, k = 2, P = cbind(c(0.10, 0.01), c(0.02, 0.075)),
sizes = c(200, 300), random.community.assignment = FALSE,
delta = c(0.2, 0.7), edge.list = FALSE)
image(Matrix(net$Adjacency))
n <- 100
P.old <- cbind(c(0.10, 0.01), c(0.02, 0.075))
P.new <- cbind(c(0.20, 0.025), c(0.02, 0.075))
P.array <- array(c(replicate(25, P.old), replicate(25, P.new)), dim = c(2, 2, 50))
community.array <- array(rep(c(rep(1, 50), rep(2, 50)), 50), dim = c(1, 100, 50))
delta.array <- array(rep(rep(0.2, 2), 50), dim = c(1, 2, 50))
dynamic.net <- dynamic.DCSBM(n = 100, T = 50, P.array = P.array,
community.array = community.array,
delta.array = delta.array, edge.list = FALSE)
#View instances of the network before and after the change
image(Matrix(dynamic.net$Adjacency.list[[1]]))
image(Matrix(dynamic.net$Adjacency.list[[30]]))
Adjacency <- dynamic.net$Adjacency.list
MLEs.example <- MLE.DCSBM(Adjacency, community.array = community.array,
T = 50, k = 2)
#Store the statistics in a data frame
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
delta_hat = MLEs.example$delta.hat.global)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
print(control.chart)
rm(list = ls())
library(NetSurv, quietly = TRUE)
devtools::install_github("jdwilson4/NetSurv")
library(NetSurv, quietly = TRUE)
#load other required packages
library(Matrix, quietly = TRUE)
library(Rlab, quietly = TRUE)
net <- DCSBM(n = 500, k = 2, P = cbind(c(0.10, 0.01), c(0.02, 0.075)),
sizes = c(200, 300), random.community.assignment = FALSE,
delta = c(0.2, 0.7), edge.list = FALSE)
image(Matrix(net$Adjacency))
n <- 100
P.old <- cbind(c(0.10, 0.01), c(0.02, 0.075))
P.new <- cbind(c(0.20, 0.025), c(0.02, 0.075))
P.array <- array(c(replicate(25, P.old), replicate(25, P.new)), dim = c(2, 2, 50))
community.array <- array(rep(c(rep(1, 50), rep(2, 50)), 50), dim = c(1, 100, 50))
delta.array <- array(rep(rep(0.2, 2), 50), dim = c(1, 2, 50))
dynamic.net <- dynamic.DCSBM(n = 100, T = 50, P.array = P.array,
community.array = community.array,
delta.array = delta.array, edge.list = FALSE)
image(Matrix(dynamic.net$Adjacency.list[[1]]))
image(Matrix(dynamic.net$Adjacency.list[[30]]))
Adjacency <- dynamic.net$Adjacency.list
MLEs.example <- MLE.DCSBM(Adjacency, community.array = community.array,
T = 50, k = 2)
community.array
community.array <- array(rep(c(rep(1, 50), rep(2, 50)), 50), dim = c(100, 1, 50))
MLEs.example <- MLE.DCSBM(Adjacency, community.array = community.array,
T = 50, k = 2)
Adjacency[[1]]
as.matrix(Adjacency[[1]])
rm(list = ls())
devtools::install_github("jdwilson4/NetSurv")
library(NetSurv, quietly = TRUE)
library(Matrix, quietly = TRUE)
library(Rlab, quietly = TRUE)
net <- DCSBM(n = 500, k = 2, P = cbind(c(0.10, 0.01), c(0.02, 0.075)),
sizes = c(200, 300), random.community.assignment = FALSE,
delta = c(0.2, 0.7), edge.list = FALSE)
image(Matrix(net$Adjacency))
n <- 100
P.old <- cbind(c(0.10, 0.01), c(0.02, 0.075))
P.new <- cbind(c(0.20, 0.025), c(0.02, 0.075))
P.array <- array(c(replicate(25, P.old), replicate(25, P.new)), dim = c(2, 2, 50))
community.array <- array(rep(c(rep(1, 50), rep(2, 50)), 50), dim = c(100, 1, 50))
delta.array <- array(rep(rep(0.2, 2), 50), dim = c(1, 2, 50))
dynamic.net <- dynamic.DCSBM(n = 100, T = 50, P.array = P.array,
community.array = community.array,
delta.array = delta.array, edge.list = FALSE)
image(Matrix(dynamic.net$Adjacency.list[[1]]))
image(Matrix(dynamic.net$Adjacency.list[[30]]))
Adjacency <- dynamic.net$Adjacency.list
MLEs.example <- MLE.DCSBM(Adjacency, community.array = community.array,
T = 50, k = 2)
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
delta_hat = MLEs.example$delta.hat.global)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
data(voting)
?voting
?Senate_Rollcall
k = 2)
MLEs.application <- MLE.DCSBM(voting.network, community.array = political.affiliation, T = length(voting.network),
k = 2)
names(MLEs.application)
statistics.application <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
Phat_22 = MLEs.example$P.hat.array[2, 2, ],
delta_hat = MLEs.example$delta.hat.global)
control.chart <- NetSurv(statistics.application, phase1.length = 20, save.plot = FALSE)
names(statistics.application) = c("Democrat-Democrat", "Republican-Democrat", "Republican-Republican",
expression(paste("SD(", hat(theta),")", sep = "")))
devtools::install_github("jdwilson4/NetSurv")
library(NetSurv, quietly = TRUE)
library(Matrix, quietly = TRUE)
library(Rlab, quietly = TRUE)
net <- DCSBM(n = 500, k = 2, P = cbind(c(0.10, 0.01), c(0.02, 0.075)),
sizes = c(200, 300), random.community.assignment = FALSE,
delta = c(0.2, 0.7), edge.list = FALSE)
image(Matrix(net$Adjacency))
n <- 100
P.old <- cbind(c(0.10, 0.01), c(0.02, 0.075))
P.new <- cbind(c(0.20, 0.025), c(0.02, 0.075))
P.array <- array(c(replicate(25, P.old), replicate(25, P.new)), dim = c(2, 2, 50))
community.array <- array(rep(c(rep(1, 50), rep(2, 50)), 50), dim = c(100, 1, 50))
delta.array <- array(rep(rep(0.2, 2), 50), dim = c(1, 2, 50))
dynamic.net <- dynamic.DCSBM(n = 100, T = 50, P.array = P.array,
community.array = community.array,
delta.array = delta.array, edge.list = FALSE)
image(Matrix(dynamic.net$Adjacency.list[[1]]))
image(Matrix(dynamic.net$Adjacency.list[[30]]))
Adjacency <- dynamic.net$Adjacency.list
MLEs.example <- MLE.DCSBM(Adjacency, community.array = community.array,
T = 50, k = 2)
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
delta_hat = MLEs.example$delta.hat.global)
names(statistics.df) <- c(expression(hat('P')[1][,][1]), expression(hat('P')[1][,][2]),
expression(hat('P')[2][,][2]), expression(paste("SD(", hat(theta),")", sep = "")))
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
print(control.chart)
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
Phat_22 = MLEs.example$P.hat.array[2, 2, ],
delta_hat = MLEs.example$delta.hat.global)
names(statistics.df) <- c(expression(hat('P')[1][,][1]), expression(hat('P')[1][,][2]),
expression(hat('P')[2][,][2]), expression(paste("SD(", hat(theta),")", sep = "")))
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
print(control.chart)
control.chart <- NetSurv(statistics.df, phase1.length = 50, save.plot = FALSE)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
Phat_22 = MLEs.example$P.hat.array[2, 2, ],
delta_hat = MLEs.example$delta.hat.global)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
print(control.chart)
data(voting)
?voting
voting
?data
help(voting)
??voting
load(voting)
data(voting)
?voting
?data
?"voting"
data("voting")
?voting
?DCSBM
devtools::install_github("jdwilson4/NetSurv")
rm(list = ls())
devtools::install_github("jdwilson4/NetSurv")
library(NetSurv, quietly = TRUE)
?voting
data(voting)
?voting
voting
net <- DCSBM(n = 500, k = 2, P = cbind(c(0.10, 0.01), c(0.02, 0.075)),
sizes = c(200, 300), random.community.assignment = FALSE,
delta = c(0.2, 0.7), edge.list = FALSE)
image(Matrix(net$Adjacency))
n <- 100
P.old <- cbind(c(0.10, 0.01), c(0.02, 0.075))
P.new <- cbind(c(0.20, 0.025), c(0.02, 0.075))
P.array <- array(c(replicate(25, P.old), replicate(25, P.new)), dim = c(2, 2, 50))
community.array <- array(rep(c(rep(1, 50), rep(2, 50)), 50), dim = c(100, 1, 50))
delta.array <- array(rep(rep(0.2, 2), 50), dim = c(1, 2, 50))
dynamic.net <- dynamic.DCSBM(n = 100, T = 50, P.array = P.array,
community.array = community.array,
delta.array = delta.array, edge.list = FALSE)
#View instances of the network before and after the change
image(Matrix(dynamic.net$Adjacency.list[[1]]))
image(Matrix(dynamic.net$Adjacency.list[[30]]))
Adjacency <- dynamic.net$Adjacency.list
MLEs.example <- MLE.DCSBM(Adjacency, community.array = community.array,
T = 50, k = 2)
#Store the statistics in a data frame
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
Phat_22 = MLEs.example$P.hat.array[2, 2, ],
delta_hat = MLEs.example$delta.hat.global)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
print(control.chart)
data(voting)
MLEs.application <- MLE.DCSBM(voting.network, community.array = political.affiliation, T = length(voting.network),
k = 2)
statistics.application <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
Phat_22 = MLEs.example$P.hat.array[2, 2, ],
delta_hat = MLEs.example$delta.hat.global)
names(statistics.application) = c("Democrat-Democrat", "Republican-Democrat", "Republican-Republican",
"delta", sep = "")))
control.chart <- NetSurv(statistics.application, phase1.length = 50, save.plot = FALSE)
names(statistics.application) = c("Democrat-Democrat", "Republican-Democrat", "Republican-Republican",
"delta")
control.chart <- NetSurv(statistics.application, phase1.length = 50, save.plot = FALSE)
statistics.application <- data.frame(Phat_11 = MLEs.application$P.hat.array[1, 1, ],
Phat_12 = MLEs.application$P.hat.array[1, 2, ],
Phat_22 = MLEs.application$P.hat.array[2, 2, ],
delta_hat = MLEs.application$delta.hat.global)
names(statistics.application) = c("Democrat-Democrat", "Republican-Democrat", "Republican-Republican",
"delta")
control.chart <- NetSurv(statistics.application, phase1.length = 50, save.plot = FALSE)
?NetSurv
control.chart <- NetSurv(statistics.application, phase1.length = 50, xaxis.new = 40:113, save.plot = FALSE)
control.chart <- NetSurv(statistics.application, phase1.length = 50, xaxis.old = seq(1, 74, 5),
xaxis.new = seq(40, 113, 5), xlab = "Congress", save.plot = FALSE)
control.chart <- NetSurv(statistics.application, phase1.length = 50, xaxis.old = seq(1, 74, 5),
xaxis.new = seq(40, 113, 5), xlab = "Congress", save.plot = FALSE)
control.chart <- NetSurv(statistics.application, phase1.length = 50, xaxis.old = seq(1, 74, 5),
xaxis.new = seq(40, 113, 5), xlab = "Congress", save.plot = FALSE)
rm(list = ls())
#install the latest version of devtools
install.packages("devtools")
library(devtools, quietly = TRUE)
#install and load NetSurv
devtools::install_github("jdwilson4/NetSurv")
install.packages("devtools")
?DCSBM
net <- DCSBM(n = 500, k = 2, P = cbind(c(0.10, 0.01), c(0.02, 0.075)),
sizes = c(200, 300), random.community.assignment = FALSE,
delta = c(0.2, 0.7), edge.list = FALSE)
image(Matrix(net$Adjacency))
library(devtools, quietly = TRUE)
#install and load NetSurv
devtools::install_github("jdwilson4/NetSurv")
library(NetSurv, quietly = TRUE)
#load other required packages
library(Matrix, quietly = TRUE)
library(Rlab, quietly = TRUE)
?DCSBM
net <- DCSBM(n = 500, k = 2, P = cbind(c(0.10, 0.01), c(0.02, 0.075)),
sizes = c(200, 300), random.community.assignment = FALSE,
delta = c(0.2, 0.7), edge.list = FALSE)
image(Matrix(net$Adjacency))''
?dynamic.DCSBM
n <- 100
P.old <- cbind(c(0.10, 0.01), c(0.02, 0.075))
P.new <- cbind(c(0.20, 0.025), c(0.02, 0.075))
P.array <- array(c(replicate(25, P.old), replicate(25, P.new)), dim = c(2, 2, 50))
community.array <- array(rep(c(rep(1, 50), rep(2, 50)), 50), dim = c(100, 1, 50))
delta.array <- array(rep(rep(0.2, 2), 50), dim = c(1, 2, 50))
dynamic.net <- dynamic.DCSBM(n = 100, T = 50, P.array = P.array,
community.array = community.array,
delta.array = delta.array, edge.list = FALSE)
#View instances of the network before and after the change
image(Matrix(dynamic.net$Adjacency.list[[1]]))
image(Matrix(dynamic.net$Adjacency.list[[30]]))
MLEs.example <- MLE.DCSBM(dynamic.net$Adjacency.list, community.array = community.array,
T = 50, k = 2)
statistics.df <- data.frame(Phat_11 = MLEs.example$P.hat.array[1, 1, ],
Phat_12 = MLEs.example$P.hat.array[1, 2, ],
delta_hat = MLEs.example$delta.hat.global)
control.chart <- NetSurv(statistics.df, phase1.length = 20, save.plot = FALSE)
print(control.chart)
data(voting)
#Estimate MLEs using DCSBM.
MLEs.application <- MLE.DCSBM(voting.network, community.array = political.affiliation,
T = length(voting.network), k = 2)
statistics.application <- data.frame(Phat_11 = MLEs.application$P.hat.array[1, 1, ],
Phat_12 = MLEs.application$P.hat.array[1, 2, ],
Phat_22 = MLEs.application$P.hat.array[2, 2, ],
delta_hat = MLEs.application$delta.hat.global)
names(statistics.application) = c("Democrat-Democrat", "Republican-Democrat",
"Republican-Republican", "delta.hat")
control.chart <- NetSurv(statistics.application, phase1.length = 50, xaxis.old = seq(1, 74, 5),
xaxis.new = seq(40, 113, 5), xlab = "Congress", save.plot = FALSE)
